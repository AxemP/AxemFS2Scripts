#Conditional Hooks
$Application: FS2_Open

$On Game Init:
[

	AxHUD = {}
	
function AxHUD:Init()

	if not AxEase then
		ba.error("AxEase not detected! Please have axease-sct.tbm in your tables folder (check https://github.com/AxemP/AxemFS2Scripts/tree/master/BaseFiles/data/tables")
	end
	
	self.Active = {} --Keeps track of active elements
	
	self:ParseConfig("lua-axhud.tbl")
	
	if self.Active.HealthBar then
		self:SetupHealthBar()
	end
	
	if self.Active.BoostBar then
		self:SetupBoostBar()
	end
	
	if self.Active.WeaponBar then
		self:SetupWeaponBar()
	end
	
	self.Enabled = false
	self.Visible = false
		
end


function AxHUD:ParseConfig(file)

	if not parse.readFileText(file, "data/tables") then
		return
	end
	
	 if parse.optionalString("#General Settings") then
				
		if parse.optionalString("$Auto Guardian:") then
			self.AutoGuardian = parse.getBoolean()
			
			if parse.optionalString("+Excluded Subsys:") then
				self.ExcludeSubsys = self:GetCSV(parse.getString())
			else
				self.ExcludeSubsys = {}
			end
			
		else
			self.AutoGuardian = false
		end
				
		if parse.optionalString("$Show Damage Gauge:") then
			self.ShowSubsystemDamage = parse.getBoolean()
		else
			self.ShowSubsystemDamage = true
		end
		
		if parse.optionalString("$Low Health Alerts:") then
			self.LowHealthAlerts = parse.getBoolean()
		else
			self.LowHealthAlerts = false
		end
		
		if parse.optionalString("$Scaling:") then
			self.Scaling = parse.getBoolean()
			
			if parse.optionalString("+Base Resolution:") then
				self.ScalingBase = self:GetCSV(parse.getString())
			else
				self.ScalingBase = {1024,768}
			end
			
			if self.Scaling then
				self.ScaleFactor = self:CalculateScaleFactor(self.ScalingBase[1])
			else
				self.ScaleFactor = 1
			end
			
		else
			self.Scaling = nil
			self.ScaleFactor = 1
		end
		
		if parse.optionalString("$Color Style:") then
			self.ColorStyle = parse.getInt()
		else
			self.ColorStyle = 0
		end
		
		if (self.ColorStyle == 0) and self.Scaling then
			ba.print("AXHUD: Monochrome images can't scale properly, disabling scaling...\n")
			self.Scaling = nil
			self.ScaleFactor = 1
		end

		parse.requiredString("#End")
		
	end
		
	 if parse.optionalString("#Health Bar Settings") then
	 
	 self.Active.HealthBar = true
	 
	 local t = {}
	 				
		if parse.requiredString("$Frame:") then
			
			local filename = parse.getString()
			
			t.Graphic = {}
			t.Graphic.Frame = {File = filename}
			t.Graphic.Frame.Width = gr.getImageWidth(filename) * self.ScaleFactor
			t.Graphic.Frame.Height = gr.getImageHeight(filename) * self.ScaleFactor
						
			if parse.optionalString("+Origin:") then
				t.Graphic.Frame.Origin = self:GetCSV(parse.getString())
			else
				t.Graphic.Frame.Origin = {0,0}
			end
			
			if parse.optionalString("+Offset:") then
				t.Graphic.Frame.Offset = self:GetCSV(parse.getString())
				t.Graphic.Frame.Offset[1] = t.Graphic.Frame.Offset[1] * self.ScaleFactor
				t.Graphic.Frame.Offset[2] = t.Graphic.Frame.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Frame.Offset = {0,0}
			end
						
			local gx = (gr.getScreenWidth() * t.Graphic.Frame.Origin[1]) + t.Graphic.Frame.Offset[1]
			local gy = (gr.getScreenHeight() * t.Graphic.Frame.Origin[2]) + t.Graphic.Frame.Offset[2]
			
			t.Graphic.Position = {x=gx, y=gy}

		end
		
		if parse.optionalString("$Hull Bar:") then
		
			t.Graphic.Bar = {}
			t.Graphic.Bar.aImage = parse.getString()
			t.Graphic.Bar.Width = gr.getImageWidth(t.Graphic.Bar.aImage) * self.ScaleFactor
			t.Graphic.Bar.Height = gr.getImageHeight(t.Graphic.Bar.aImage) * self.ScaleFactor
			
			if parse.optionalString("+Alt Image:") then
				t.Graphic.Bar.bImage = parse.getString()
			end
			
			if parse.optionalString("+Offset:") then
				t.Graphic.Bar.Offset = self:GetCSV(parse.getString())
				t.Graphic.Bar.Offset[1] = t.Graphic.Bar.Offset[1] * self.ScaleFactor
				t.Graphic.Bar.Offset[2] = t.Graphic.Bar.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Bar.Offset = {0,0}
			end
						
			t.Colors = {}
			
			if parse.optionalString("+Color Good:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Good = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Good = {90,200,0,192}
			end
			
			if parse.optionalString("+Color Okay:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.OK = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.OK = {255,212,0,192}
			end
			
			if parse.optionalString("+Color Bad:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Bad = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Bad = {192,0,0,192}
			end
			
			if parse.optionalString("+Color Danger:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Danger = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Danger = {255,0,0,225}
			end
			
			if parse.optionalString("+Low Hull Text:") then
				self.LowHealthText = parse.getBoolean()
			else
				self.LowHealthText = false
			end
			
			if parse.optionalString("+Direction:") then
				t.HullDirection = self:GetDirection(parse.getString())
			else
				t.HullDirection = 0
			end

		end
		
		if parse.optionalString("$Shield Bar:") then
			self.ShowShields = true
			t.Graphic.ShieldBar = {}
			t.Graphic.ShieldBar.aImage = parse.getString()
			t.Graphic.ShieldBar.Width = gr.getImageWidth(t.Graphic.ShieldBar.aImage) * self.ScaleFactor
			t.Graphic.ShieldBar.Height = gr.getImageHeight(t.Graphic.ShieldBar.aImage) * self.ScaleFactor
			
			if parse.optionalString("+Alt Image:") then
				t.Graphic.ShieldBar.bImage = parse.getString()
			end
			
			if parse.optionalString("+Offset:") then
				t.Graphic.ShieldBar.Offset = self:GetCSV(parse.getString())
				t.Graphic.ShieldBar.Offset[1] = t.Graphic.ShieldBar.Offset[1] * self.ScaleFactor
				t.Graphic.ShieldBar.Offset[2] = t.Graphic.ShieldBar.Offset[2] * self.ScaleFactor
			else
				t.Graphic.ShieldBar.Offset = {0,0}
			end
						
			if parse.optionalString("+Color:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Shield = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Shield = {90,200,0,192}
			end
			
			if parse.optionalString("+Direction:") then
				t.ShieldDirection = self:GetDirection(parse.getString())
			else
				t.ShieldDirection = 0
			end
			
		else
			self.ShowShields = false
		end
		
		parse.requiredString("#End")
		
		self.HealthBar = t
		
	end
		
	if parse.optionalString("#Boost Bar Settings") then
	
		self.Active.BoostBar = true
		
		local t = {}
		
		if parse.requiredString("$Frame:") then
			
			local filename = parse.getString()
			
			t.Graphic = {}
			t.Graphic.Frame = {File = filename}
			t.Graphic.Frame.Width = gr.getImageWidth(filename) * self.ScaleFactor
			t.Graphic.Frame.Height = gr.getImageHeight(filename) * self.ScaleFactor
						
			if parse.optionalString("+Origin:") then
				t.Graphic.Frame.Origin = self:GetCSV(parse.getString())
			else
				t.Graphic.Frame.Origin = {0,0}
			end
			
			if parse.optionalString("+Offset:") then
				t.Graphic.Frame.Offset = self:GetCSV(parse.getString())
				t.Graphic.Frame.Offset[1] = t.Graphic.Frame.Offset[1] * self.ScaleFactor
				t.Graphic.Frame.Offset[2] = t.Graphic.Frame.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Frame.Offset = {0,0}
			end
						
			local gx = (gr.getScreenWidth() * t.Graphic.Frame.Origin[1]) + t.Graphic.Frame.Offset[1]
			local gy = (gr.getScreenHeight() * t.Graphic.Frame.Origin[2]) + t.Graphic.Frame.Offset[2]
			
			t.Graphic.Position = {x=gx, y=gy}

		end
		
		if parse.optionalString("$Bar:") then
		
			t.Graphic.Bar = {}
			t.Graphic.Bar.aImage = parse.getString()
			t.Graphic.Bar.Width = gr.getImageWidth(t.Graphic.Bar.aImage) * self.ScaleFactor
			t.Graphic.Bar.Height = gr.getImageHeight(t.Graphic.Bar.aImage) * self.ScaleFactor
			
			if parse.optionalString("+Alt Image:") then
				t.Graphic.Bar.bImage = parse.getString()
			end
						
			if parse.optionalString("+Offset:") then
				t.Graphic.Bar.Offset = self:GetCSV(parse.getString())
				t.Graphic.Bar.Offset[1] = t.Graphic.Bar.Offset[1] * self.ScaleFactor
				t.Graphic.Bar.Offset[2] = t.Graphic.Bar.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Bar.Offset = {0,0}
			end
						
			t.Colors = {}
			
			if parse.optionalString("+Color:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Good = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Good = {0,128,255,255}
			end
			
			if parse.optionalString("+Color Low:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Low = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Low = {255,212,0,192}
			end
			
			if parse.optionalString("+Direction:") then
				t.Direction = self:GetDirection(parse.getString())
			else
				t.Direction = 0
			end

		end
							
		parse.requiredString("#End")
		
		self.BoostBar = t
	
	end
	
	if parse.optionalString("#Weapon Bar Settings") then
	
		self.Active.WeaponBar = true
		
		local t = {}
		
		if parse.requiredString("$Frame:") then
			
			local filename = parse.getString()
			
			t.Graphic = {}
			t.Graphic.Frame = {File = filename}
			t.Graphic.Frame.Width = gr.getImageWidth(filename) * self.ScaleFactor
			t.Graphic.Frame.Height = gr.getImageHeight(filename) * self.ScaleFactor
						
			if parse.optionalString("+Origin:") then
				t.Graphic.Frame.Origin = self:GetCSV(parse.getString())
			else
				t.Graphic.Frame.Origin = {0,0}
			end
			
			if parse.optionalString("+Offset:") then
				t.Graphic.Frame.Offset = self:GetCSV(parse.getString())
				t.Graphic.Frame.Offset[1] = t.Graphic.Frame.Offset[1] * self.ScaleFactor
				t.Graphic.Frame.Offset[2] = t.Graphic.Frame.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Frame.Offset = {0,0}
			end
						
			local gx = (gr.getScreenWidth() * t.Graphic.Frame.Origin[1]) + t.Graphic.Frame.Offset[1]
			local gy = (gr.getScreenHeight() * t.Graphic.Frame.Origin[2]) + t.Graphic.Frame.Offset[2]
			
			t.Graphic.Position = {x=gx, y=gy}

		end
		
		if parse.optionalString("$Bar:") then
		
			t.Graphic.Bar = {}
			t.Graphic.Bar.aImage = parse.getString()
			t.Graphic.Bar.Width = gr.getImageWidth(t.Graphic.Bar.aImage) * self.ScaleFactor
			t.Graphic.Bar.Height = gr.getImageHeight(t.Graphic.Bar.aImage) * self.ScaleFactor
			
			if parse.optionalString("+Alt Image:") then
				t.Graphic.Bar.bImage = parse.getString()
			end
						
			if parse.optionalString("+Offset:") then
				t.Graphic.Bar.Offset = self:GetCSV(parse.getString())
				t.Graphic.Bar.Offset[1] = t.Graphic.Bar.Offset[1] * self.ScaleFactor
				t.Graphic.Bar.Offset[2] = t.Graphic.Bar.Offset[2] * self.ScaleFactor
			else
				t.Graphic.Bar.Offset = {0,0}
			end
						
			t.Colors = {}
			
			if parse.optionalString("+Color:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Good = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Good = {90,200,0,192}
			end
			
			if parse.optionalString("+Color Low:") then
				local rgba = self:GetCSV(parse.getString())
				t.Colors.Low = {rgba[1],rgba[2],rgba[3],rgba[4] or 255}
			else
				t.Colors.Low = {255,212,0,192}
			end
			
			if parse.optionalString("+Direction:") then
				t.Direction = self:GetDirection(parse.getString())
			else
				t.Direction = 0
			end

		end
							
		parse.requiredString("#End")
		
		self.WeaponBar = t
	
	end

end

function AxHUD:SetupHealthBar()

	if not self.ShowSubsystemDamage then
		mn.runSEXP("(hud-set-retail-gauge-active (false) !Damage!)")
	end
	
	local t = self.HealthBar
	
	t.Colors.Frame = {}
	t.Colors.Frame[1], t.Colors.Frame[2], t.Colors.Frame[3], t.Colors.Frame[4] = hu.getHUDGaugeColor(6)
	t.Colors.Frame[4] = 200
	
	t.CurrentHull = 1
	t.DisplayedHull = 1
	t.LastHull = 1
	
	t.CurrentShield = 1
	t.DisplayedShield = 1
	t.LastShield = 1
	
	t.LastClass = -1
	
	t.Easing = false
	t.EaseStart = 1
	t.EaseDiff = 0
	t.EaseTimestamp = -1
	t.EaseDuration = 0.05
	t.EaseTime = 0
	
	t.EasingShield = false
	t.EaseShieldStart = 1
	t.EaseShieldDiff = 0
	t.EaseShieldTimestamp = -1
	t.EaseShieldDuration = 0.001
	t.EaseShieldTime = 0
	
	if self.LowHealthAlerts then
		t.LowHealth = {"LowHealth1", "LowHealth2"} -- These need to be set up in your sounds.tbl
		t.LowHealthLevel = 0
		t.LowHealthTimer = -1
	end
	
	t.Draw = AxHUD.DrawHealthBars
	t.DrawHullBar = AxHUD.DrawHullBar
	t.DrawShieldBar = AxHUD.DrawShieldBar

	self.ShieldUpdateTime = mn.getMissionTime()
	self.ShieldUpdateRate = 1

end

function AxHUD:SetupBoostBar()

	mn.runSEXP("(hud-set-retail-gauge-active (false) !Afterburner energy!)")
	
	local t = self.BoostBar
	
	t.Colors.Frame = {}
	t.Colors.Frame[1], t.Colors.Frame[2], t.Colors.Frame[3], t.Colors.Frame[4] = hu.getHUDGaugeColor(20)
	t.Colors.Frame[4] = 200
		
	t.Draw = AxHUD.DrawBoostBar

end

function AxHUD:SetupWeaponBar()

	mn.runSEXP("(hud-set-retail-gauge-active (false) !Weapon energy!)")
	
	local t = self.WeaponBar
	
	t.Colors.Frame = {}
	t.Colors.Frame[1], t.Colors.Frame[2], t.Colors.Frame[3], t.Colors.Frame[4] = hu.getHUDGaugeColor(16)
	t.Colors.Frame[4] = 200
		
	t.Draw = AxHUD.DrawWeaponBar

end

function AxHUD:GuardianAllSS(ship)

	for i=1, #ship do
		local ss = ship[i]
		local name = ship.Name
		local ssName = ss:getModelName()
		
		if not self:CheckSubsys(ssName) then
			mn.runSEXP("( ship-subsys-guardian-threshold 100 !" .. name .. "! !" .. ssName .. "! )")
		end
		
	end

end

function AxHUD:CheckSubsys(subsys)

	if self.ExcludeSubsys then
		for i=1, #self.ExcludeSubsys do
			local entry = self.ExcludeSubsys[i]
			
			if entry == subsys then return true end
			
		end
		
		return false
	end

end

function AxHUD:DrawHealthBars()

	local barInfo = self.Graphic
	local frameColor = self.Colors.Frame
	
	if AxHUD.ColorStyle == 0 then
		gr.setColor(frameColor[1]*1.5, frameColor[2]*1.5, frameColor[3]*1.5, frameColor[4])
		gr.drawMonochromeImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height,0.5)
	else
		gr.drawImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height)
	end
	
	self:DrawHullBar()
	
	if AxHUD.ShowShields then
		self:DrawShieldBar()
	end
	
		
end
	
function AxHUD:DrawHullBar()

	local drawText = false
	local object = hv.Player

	if AxHUD.AutoGuardian then
		if self.LastClass ~= object.Class:getShipClassIndex() then
			self.LastClass = object.Class:getShipClassIndex()
			AxHUD:GuardianAllSS(object)
		end	
	end
	
	self.CurrentHull = object.HitpointsLeft / object.HitpointsMax
	
	local diff = self.CurrentHull - self.LastHull
		
	self.DisplayedHull = AxEase:Process("hull", self.LastHull, self.CurrentHull, 0.5, "linear", 0.01) or self.DisplayedHull

	--Draw frame first
	
	local barInfo = self.Graphic
	local frameColor = self.Colors.Frame	
	local barColor
	local barImage = barInfo.Bar.aImage
		
	if AxHUD.ColorStyle == 0 then
		if self.DisplayedHull > 0.66 then
			barColor = self.Colors.Good
		elseif self.DisplayedHull > 0.33 and self.DisplayedHull <= 0.66 then
			barColor = self.Colors.OK
		elseif self.DisplayedHull > 0.15 and self.DisplayedHull <= 0.33 then
			barColor = self.Colors.Bad
		elseif self.DisplayedHull <= 0.15 then
			barColor = self.Colors.Danger
		end
	elseif self.ColorStyle == 2 then
		local r,g,b = object.Team:getColor()
		barColor = {r, g, b, 192}
	end
	
	if self.DisplayedHull > 0.15 and self.DisplayedHull <= 0.33 then
		drawText = true	
	elseif self.DisplayedHull <= 0.15 then
		barImage = barInfo.Bar.bImage
		drawText = true	
	end
	
	if barColor then
		gr.setColor(barColor[1], barColor[2], barColor[3], barColor[4])
	end
	
	if AxHUD.LowHealthAlerts then
		local soundPlayed = false
		
		if self.CurrentHull <= 0.15 and self.LastHull > 0.15 then
			self.Sound = ad.playSound(ad.getSoundentry(self.LowHealth[2]))
			soundPlayed = true
		end
		
		if self.CurrentHull <= 0.33 and self.LastHull > 0.33 and not soundPlayed then
			if self.Sound and self.Sound:isPlaying() then self.Sound:stop() end
			self.Sound = ad.playSound(ad.getSoundentry(self.LowHealth[1]))
		end
	end
	
	local barWidth
	local x1, x2, y1, y2
	local uvx1, uvx2, uvy1, uvy2
	
	if (self.HullDirection == 0) or (self.HullDirection == 1) then
		barWidth = self.DisplayedHull * barInfo.Bar.Width
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedHull, barInfo.Bar.Width, self.HullDirection, barInfo.Bar.Offset)
	else
		barWidth = self.DisplayedHull * barInfo.Bar.Height
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedHull, barInfo.Bar.Height, self.HullDirection, barInfo.Bar.Offset)
	end

	if AxHUD.ColorStyle == 0 then
		gr.drawMonochromeImage(barImage, x1, y1, x2 ,y2 , barColor[4]/255)
	else
		gr.drawImage(barImage, x1, y1, x2 ,y2 , uvx1, uvy1, uvx2, uvy2, 1)
	end
	
	if AxHUD.LowHealthText and drawText then
		gr.setColor(255,255,255,192)
		gr.CurrentFont = gr.Fonts[3]
		local displayString = string.format("%d%%", self.DisplayedHull * 100)
		--local displayString2 = string.format("%d %%", self.CurrentHull * 100)
		local x = math.max(barInfo.Position.x + barInfo.Bar.Offset[1]+25,barInfo.Position.x + barInfo.Bar.Offset[1]+barWidth+2)
		gr.drawString(displayString, x + 2, barInfo.Position.y+27)
	end
	
	self.LastHull = self.CurrentHull

end

function AxHUD:DrawShieldBar()

	local drawText = false
	local object = hv.Player
	
	self.CurrentShield = object.Shields.CombinedLeft / object.Shields.CombinedMax
		
	local lowQuad = false
	
	for i=1, #object.Shields do
		if (object.Shields[i] / object.Shields.CombinedMax) < 0.05 then
			lowQuad = true
		end
	end
	
	self.DisplayedShield = AxEase:Process("shield", self.LastShield, self.CurrentShield, 0.5, "linear", 0.01) or self.DisplayedShield
		
	local barInfo = self.Graphic
	local barColor = self.Colors.Shield
	local barImage

	if lowQuad then
		barImage = barInfo.ShieldBar.bImage
	else
		barImage = barInfo.ShieldBar.aImage
	end
			
	gr.setColor(barColor[1], barColor[2], barColor[3], barColor[4])
		
	local barWidth
	local x1, x2, y1, y2
	local uvx1, uvx2, uvy1, uvy2
	
	if (self.ShieldDirection == 0) or (self.ShieldDirection == 1) then
		barWidth = self.DisplayedShield * barInfo.ShieldBar.Width
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedShield, barInfo.ShieldBar.Width, self.ShieldDirection, barInfo.ShieldBar.Offset)
	else
		barWidth = self.DisplayedShield * barInfo.ShieldBar.Height
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedShield, barInfo.ShieldBar.Height, self.ShieldDirection, barInfo.ShieldBar.Offset)
	end

	if AxHUD.ColorStyle == 0 then
		gr.drawMonochromeImage(barImage, x1, y1, x2 ,y2 ,barColor[4]/255)
	else
		gr.drawImage(barImage, x1, y1, x2 ,y2 , uvx1, uvy1, uvx2, uvy2, 1)
	end
			
	--[[if drawText then
		gr.setColor(255,255,255,192)
		gr.CurrentFont = gr.Fonts[3]
		local displayString = string.format("%d %%", self.DisplayedHull * 100)
		--local displayString2 = string.format("%d %%", self.CurrentHull * 100)
		local x = math.max(barInfo.Position.x + barInfo.ShieldBar.Offset[1]+25,barInfo.Position.x + barInfo.ShieldBar.Offset[1]+barWidth+2)
		gr.drawString(displayString, x + 2, barInfo.Position.y+12)
	end]]--
	
	self.LastShield = self.CurrentShield

end

function AxHUD:DrawBoostBar()

	local drawText = false
	local object = hv.Player
		
	self.DisplayedLevel = object.AfterburnerFuelLeft / object.AfterburnerFuelMax
		
	local barInfo = self.Graphic
	local frameColor = self.Colors.Frame	
	local barColor
	local barImage = barInfo.Bar.aImage
	
	if AxHUD.ColorStyle == 0 then
		gr.setColor(frameColor[1]*1.5, frameColor[2]*1.5, frameColor[3]*1.5, frameColor[4])
		gr.drawMonochromeImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height,0.5)
	else
		gr.drawImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height)
	end
		
	if self.DisplayedLevel >= 0.25 then
			if AxHUD.ColorStyle == 0 then barColor = self.Colors.Good end
		else
			if AxHUD.ColorStyle == 0 then barColor = self.Colors.Low end
			if barInfo.Bar.bImage then barImage = barInfo.Bar.bImage end
	end
	
	if barColor then
		gr.setColor(barColor[1], barColor[2], barColor[3], barColor[4])
	end
		
	local barWidth
	local x1, x2, y1, y2
	local uvx1, uvx2, uvy1, uvy2
	
	if (self.Direction == 0) or (self.Direction == 1) then
		barWidth = self.DisplayedLevel * barInfo.Bar.Width
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedLevel, barInfo.Bar.Width, self.Direction, barInfo.Bar.Offset)
	else
		barWidth = self.DisplayedLevel * barInfo.Bar.Height
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedLevel, barInfo.Bar.Height, self.Direction, barInfo.Bar.Offset)
	end

	if AxHUD.ColorStyle == 0 then
		gr.drawMonochromeImage(barImage, x1, y1, x2 ,y2 , barColor[4]/255)
	else
		gr.drawImage(barImage, x1, y1, x2 ,y2 , uvx1, uvy1, uvx2, uvy2, 1)
	end
	
end

function AxHUD:DrawWeaponBar()

	local drawText = false
	local object = hv.Player
		
	self.DisplayedLevel = object.WeaponEnergyLeft / object.WeaponEnergyMax
	
	local barInfo = self.Graphic
	local frameColor = self.Colors.Frame	
	local barColor
	local barImage = barInfo.Bar.aImage
	
	if AxHUD.ColorStyle == 0 then
		gr.setColor(frameColor[1]*1.5, frameColor[2]*1.5, frameColor[3]*1.5, frameColor[4])
		gr.drawMonochromeImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height,0.5)
	else
		gr.drawImage(barInfo.Frame.File, barInfo.Position.x, barInfo.Position.y, barInfo.Position.x+barInfo.Frame.Width,barInfo.Position.y+barInfo.Frame.Height)
	end
		
	if self.DisplayedLevel >= 0.25 then
			if AxHUD.ColorStyle == 0 then barColor = self.Colors.Good end
		else
			if AxHUD.ColorStyle == 0 then barColor = self.Colors.Low end
			if barInfo.Bar.bImage then barImage = barInfo.Bar.bImage end
	end
	
	if barColor then
		gr.setColor(barColor[1], barColor[2], barColor[3], barColor[4])
	end
		
	local barWidth
	local x1, x2, y1, y2
	local uvx1, uvx2, uvy1, uvy2
	
	if (self.Direction == 0) or (self.Direction == 1) then
		barWidth = self.DisplayedLevel * barInfo.Bar.Width
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedLevel, barInfo.Bar.Width, self.Direction, barInfo.Bar.Offset)
	else
		barWidth = self.DisplayedLevel * barInfo.Bar.Height
		x1, y1, x2, y2, uvx1, uvy1, uvx2, uvy2 = AxHUD:GetBarCoords(barInfo, self.DisplayedLevel, barInfo.Bar.Height, self.Direction, barInfo.Bar.Offset)
	end

	if AxHUD.ColorStyle == 0 then
		gr.drawMonochromeImage(barImage, x1, y1, x2 ,y2 , barColor[4]/255)
	else
		gr.drawImage(barImage, x1, y1, x2 ,y2 , uvx1, uvy1, uvx2, uvy2, 1)
	end
	
end

function AxHUD:Draw()

	if self.ColorStyle == 1 then
		gr.CurrentOpacityType = ALPHABLEND_FILTER
	else
		gr.CurrentOpacityType = ALPHABLEND_NONE
	end

	if hv.Player.HitpointsLeft > 0 then
		if self.Active.HealthBar then self.HealthBar:Draw() end
		if self.Active.BoostBar then self.BoostBar:Draw() end
		if self.Active.WeaponBar then self.WeaponBar:Draw() end
	end

end

function AxHUD:Ease(t,b,c,d)
  t = t / d
  return -c * t * (t - 2) + b
end

--http://lua-users.org/wiki/LuaCsv
function AxHUD:GetCSV(line,sep)

	local res = {}
	local pos = 1
	sep = sep or ','
	while true do 
		local c = string.sub(line,pos,pos)
		if (c == "") then break end
		if (c == '"') then
			-- quoted value (ignore separator within)
			local txt = ""
			repeat
				local startp,endp = string.find(line,'^%b""',pos)
				txt = txt..string.sub(line,startp+1,endp-1)
				pos = endp + 1
				c = string.sub(line,pos,pos) 
				if (c == '"') then txt = txt..'"' end 
				-- check first char AFTER quoted string, if it is another
				-- quoted string without separator, then append it
				-- this is the way to "escape" the quote char in a quote. example:
				--   value1,"blub""blip""boing",value3  will result in blub"blip"boing  for the middle
			until (c ~= '"')
			table.insert(res,txt)
			assert(c == sep or c == "")
			pos = pos + 1
		else	
			-- no quotes used, just look for the first separator
			local startp,endp = string.find(line,sep,pos)
			if (startp) then 
				table.insert(res,string.sub(line,pos,startp-1))
				pos = endp + 1
			else
				-- no separator found -> use rest of string and terminate
				table.insert(res,string.sub(line,pos))
				break
			end 
		end
	end
	
	return res
	
end

function AxHUD:CalculateScaleFactor(base)

	local scalingFactor = 1

	scalingFactor = gr.getScreenWidth() / base
	
	return scalingFactor

end

function AxHUD:GetDirection(s)

	if string.lower(s) == "right" then
		return 0
	elseif string.lower(s) == "left" then
		return 1
	elseif string.lower(s) == "up" then
		return 2
	elseif string.lower(s) == "down" then
		return 3
	end

end

function AxHUD:GetBarCoords(barInfo, factor, fullWidth, direction,offset,debugme)

	local x1, x2, y1, y2
	local uvx1, uvx2, uvy1, uvy2
	
	if (not direction) or (direction == 0) then --right
	
		x1 = barInfo.Position.x + offset[1]
		x2 = x1 + (factor * fullWidth)
		y1 = barInfo.Position.y + offset[2]
		y2 = y1 + barInfo.Bar.Height
		
		uvx1 = 0
		uvy1 = 0
		uvx2 = factor
		uvy2 = 1
		
	elseif direction == 1 then --left
	
		x2 = barInfo.Position.x + offset[1] + fullWidth
		x1 = x2 - (factor * fullWidth)
		y1 = barInfo.Position.y + offset[2]
		y2 = y1 + barInfo.Bar.Height
		
		uvx1 = 1 - factor
		uvy1 = 0
		uvx2 = 1
		uvy2 = 1
	
	elseif direction == 2 then --up
	
		x1 = barInfo.Position.x + offset[1]
		x2 = x1 + barInfo.Bar.Width
		y1 = barInfo.Position.y + offset[2]
		y2 = y1 + (factor * fullWidth)
		
		uvx1 = 0
		uvy1 = 0
		uvx2 = 1
		uvy2 = factor
	
	elseif direction == 3 then --down
	
		x1 = barInfo.Position.x + offset[1]
		x2 = x1 + barInfo.Bar.Width
		y2 = barInfo.Position.y + offset[2] + fullWidth
		y1 = y2 - (factor * fullWidth)
		
		uvx1 = 0
		uvy1 = 1 - factor
		uvx2 = 1
		uvy2 = 1

	end
	
	return x1,y1,x2,y2,uvx1,uvy1,uvx2,uvy2

end

]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start:
[
	AxHUD:Init()
]

$On State End:
[
	AxHUD.Enabled = false
]

$On HUD Draw:
[
	if not AxHUD.Enabled and mn.getMissionTime() > 0.1 then
		AxHUD.Enabled = true
		AxHUD.Visible = true
	end
	
	if AxHUD.Enabled then
	
		local canDraw = true
		
		if not AxHUD.Visible then
			canDraw = false
		end
		
		if not hu.HUDDrawn then
			canDraw = false
		end
		
		if hu.HUDDisabledExceptMessages then
			canDraw = false
		end
		
		if not (gr.hasViewmode(VM_INTERNAL) or gr.hasViewmode(VM_CHASE)) then
			canDraw = false
		end
		
		if PromptBox and PromptBox.Visible then
			canDraw = false
		end
	
		if canDraw then
			AxHUD:Draw()
		end
	end
]

#End