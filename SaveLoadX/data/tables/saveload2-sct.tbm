#Conditional Hooks
$Application: FS2_Open

$On Game Init:
[

SaveState = {}

function SaveState:Init()

	self.WorksOutOfCampaign = true
	
	if self.WorksOutOfCampaign or mn.isInCampaign() then
		self.Enabled = true
	end
	
	if not self.Enabled then
		return
	end
	
	self.CurrentIndex = nil
	self.List = self:GetAllCurrentShips()
		
	local playerData = ba.getCurrentPlayer()
	
	self.SaveFilename = playerData:getName() .. "_" .. mn.getMissionFilename() .. ".sav"
	
	if cf.fileExists(self.SaveFilename, "data/config") then
		self.LoadedData = axemParse:ReadJSON(self.SaveFilename, "data/config")
	else
		self.LoadedData = {}
	end
	
	self.AssistList = {}
	self.AssistHP = nil
	self.AssistAmmo = nil

end

--This just gets called at mission start so we have the beginnings of our master list.
function SaveState:GetAllCurrentShips()

	local t = {}
	local numShips = #mn.Ships
	
	for i=1, numShips do
	
		if mn.Ships[i] and mn.Ships[i]:isValid() then
			t[#t+1] = mn.Ships[i].Name
		end
	
	end
	
	return t

end

--When a ship arrives, we add it to THE LIST, which we'll check when we're saving. We want to catch every ship that arrives, even ones that might have died/left already, so that's why we're not just checking mn.Ships[].
function SaveState:AddShip(ship)

	if self.Enabled then
		self.List[#self.List+1] = ship.Name
	end

end

 --Collecting data from a ship
function SaveState:GetShipData(shipname)

	local t = {}
	
	t.Name = shipname
		
	t.IsInMission = mn.evaluateSEXP("(is-in-mission !" .. t.Name .. "!)")
	t.HasArrived = mn.evaluateSEXP("(has-arrived-delay 0 !" .. t.Name .. "!)")
	t.HasBeenDestroyed = mn.evaluateSEXP("(is-destroyed-delay 0 !" .. t.Name .."!)")
	t.HasDeparted = mn.evaluateSEXP("(has-departed-delay 0 !" .. t.Name .."!)")
		
	if t.IsInMission then
	
		local ship = mn.Ships[shipname]
	
		if ship and ship:isValid() then
		
			t.Class = ship.Class.Name
			
			if ship:getWing() and ship:getWing():isValid() then
				t.Wing = ship:getWing().Name
			end
			
			t.HP = math.floor((ship.HitpointsLeft / ship.HitpointsMax) * 100)
		
			if ship.Shields and ship.Shields:isValid() then
				t.Shields = math.floor((ship.Shields.CombinedLeft / ship.Shields.CombinedMax) * 100)
			end
			
			t.HullArmor = ship.ArmorClass 
			t.ShieldArmor = ship.ShieldArmorClass
			
			t.Team = ship.Team.Name
			
			local numSubsys = #ship
			
			if numSubsys > 0 then
				t.Subsystems = {}
				
				for i=1, numSubsys do
					local thisSubsys = ship[i]
					local ss = {}
					
					ss.HP = math.floor((thisSubsys.HitpointsLeft / thisSubsys.HitpointsMax) * 100)
					ss.Armor = thisSubsys.ArmorClass
					
					if thisSubsys:isTurret() then
					
						ss.TurretLocked = thisSubsys.TurretLocked 
					
						if thisSubsys.PrimaryBanks and thisSubsys.PrimaryBanks:isValid() then
							ss.PBanks = {}
							for j=1, #thisSubsys.PrimaryBanks do
								if thisSubsys.PrimaryBanks[j] and thisSubsys.PrimaryBanks[j]:isValid() then
									ss.PBanks[j] = {}
									ss.PBanks[j].Class = thisSubsys.PrimaryBanks[j].WeaponClass.Name
									ss.PBanks[j].AmmoLeft = math.floor((thisSubsys.PrimaryBanks[j].AmmoLeft / thisSubsys.PrimaryBanks[j].AmmoMax) * 100)
								end
							end
						end
						
						if thisSubsys.SecondaryBanks and thisSubsys.SecondaryBanks:isValid() then
							ss.SBanks = {}
							for j=1, #thisSubsys.SecondaryBanks do
								if thisSubsys.SecondaryBanks[j] and thisSubsys.SecondaryBanks[j]:isValid() then
									ss.SBanks[j] = {}
									ss.SBanks[j].Class = thisSubsys.SecondaryBanks[j].WeaponClass.Name
									ss.SBanks[j].AmmoLeft = math.floor((thisSubsys.SecondaryBanks[j].AmmoLeft / thisSubsys.SecondaryBanks[j].AmmoMax) * 100)
								end
							end
						end
					end
					
					t.Subsystems[i] = ss
					
				end
			end
				
			if ship.PrimaryBanks and ship.PrimaryBanks:isValid() then
				t.PBanks = {}
				for i=1, #ship.PrimaryBanks do
					t.PBanks[i] = {}
					t.PBanks[i].Class = ship.PrimaryBanks[i].WeaponClass.Name
					t.PBanks[i].AmmoLeft = math.floor((ship.PrimaryBanks[i].AmmoLeft / ship.PrimaryBanks[i].AmmoMax) * 100)
				end
			end
			
			if ship.SecondaryBanks and ship.SecondaryBanks:isValid() then
				t.SBanks = {}
				for i=1, #ship.SecondaryBanks do
					t.SBanks[i] = {}
					t.SBanks[i].Class = ship.SecondaryBanks[i].WeaponClass.Name
					t.SBanks[i].AmmoLeft = math.floor((ship.SecondaryBanks[i].AmmoLeft / ship.SecondaryBanks[i].AmmoMax) * 100)
				end
			end
			
			if ship == hv.Player then
			
				t.AfterburnerFuelLeft = ship.AfterburnerFuelLeft 
				t.WeaponEnergyLeft = ship.WeaponEnergyLeft
			
			end
			
			t.Position = {}
			t.Position.x = ship.Position.x
			t.Position.y = ship.Position.y
			t.Position.z = ship.Position.z
			
			t.Orientation = {}
			t.Orientation.p = ship.Orientation.p
			t.Orientation.b = ship.Orientation.b
			t.Orientation.h = ship.Orientation.h

			t.Velocity = {}
			t.Velocity.x = ship.Physics.Velocity.x
			t.Velocity.y = ship.Physics.Velocity.y
			t.Velocity.z = ship.Physics.Velocity.z
		
		end
		
	end

	return t, t.Name

end

 --This is what lua-savestate-save calls
 --We go through THE LIST and nab all of the ship data which will go into self.LoadedData which is what will get saved.
 --We use the ship name as a key for the data table for ease of retrival and checking later. This might take a bit more CPU time, but we can probably spare it.
function SaveState:SaveAll(index)

	if not self.Enabled then return false end

	local data = {}
		
	for i, entry in ipairs(self.List) do
		shipdata,key = self:GetShipData(entry)	
		data[key] = shipdata
	end
	
	self.LoadedData[index or #self.LoadedData+1] = data

	ba.print("SAVE STATE: Writing save data to file " .. self.SaveFilename .. " with save index " .. index .. "\n")
	axemParse:WriteJSON(self.LoadedData, self.SaveFilename, "data/config")

end

 --This is what lua-savestate-load calls
 --Determinations are used to figure out how to apply the data. If the ship is present, we can apply it now. If not, we'll need to put it in the parsed object data. We also check if the ship is blown up or departed, where we can instantly and forcefully apply these things.
function SaveState:LoadAll(index)

	if not self.Enabled then return false end

	if not index then
		ba.print("SAVE STATE: no index specified, aborting load data.\n")
		return
	else
		self.CurrentIndex = index
	end
	
	local thisloadeddata = self.LoadedData[self.CurrentIndex]
	
	if not thisloadeddata then
		ba.print("SAVE STATE: index " .. self.CurrentIndex .. " not found, aborting load data.\n")
		return
	end
	
	--Apply saved data to ships that are present
	
	local numShips = #mn.Ships
	
	for i=1, numShips do
		local thisShip = mn.Ships[i]
		if thisShip and thisShip:isValid() then
			local thisShipName = thisShip.Name
			local data = thisloadeddata[thisShipName]
			
			if data then
				if data.IsInMission then --Present from the start and was alive during save...
					self:ApplyData(thisShip,data)
				else
					if data.HasBeenDestroyed then -- or was destroyed
						self:InstantKill(thisShip)
					elseif data.HasDeparted then -- or had left
						self:InstantDepart(thisShip)
					end
				end
			end
		end
	end
	
	--Apply saved data to ships that have yet to arrive
	
	for thisShip in mn.getArrivalList() do
	
		local data = thisloadeddata[thisShip.Name]
		
		if data and data.IsInMission then
			self:ApplyParseData(thisShip,data)
		end
		
	end

end

--Applying data to ships already present at time of load
function SaveState:ApplyData(ship,data)

	if ship.Class.Name ~= data.Class then
		ship.Class = tb.ShipClasses[data.Class]
	end
	
	ship.HitpointsLeft = (self:GetHP(data.HP,data.Name) / 100) * ship.HitpointsMax
	
	if data.Shields and ship.Shields and ship.Shields:isValid() then
		for i=1, #ship.Shields do
			ship.Shields[i] = (data.Shields / 100 / #ship.Shields) * ship.Shields.CombinedMax
		end
	end
	
	ship.ArmorClass = data.HullArmor
	ship.ShieldArmorClass = data.ShieldArmor
	
	ship.Team = mn.Teams[data.Team]
	
	local numSubsys = #ship
	
	if numSubsys > 0 then

		for i=1, numSubsys do
			local thisSubsys = ship[i]
			local ssdata = data.Subsystems[i]
			
			if ssdata.HP then
				thisSubsys.HitpointsLeft = ssdata.HP
			end
			
			if ssdata.Armor then
				thisSubsys.ArmorClass = ssdata.Armor
			end
			
			if thisSubsys:isTurret() then
			
				 thisSubsys.TurretLocked = ssdata.TurretLocked
			
				if thisSubsys.PrimaryBanks and thisSubsys.PrimaryBanks:isValid() then
					for j=1, #thisSubsys.PrimaryBanks do
						if thisSubsys.PrimaryBanks[j] and thisSubsys.PrimaryBanks[j]:isValid() then
							thisSubsys.PrimaryBanks[j].WeaponClass = tb.WeaponClasses[ssdata.PBanks[j].Class]
							thisSubsys.PrimaryBanks[j].AmmoLeft = (self:GetAmmo(ssdata.PBanks[j].AmmoLeft,data.Name)/100) * thisSubsys.PrimaryBanks[j].AmmoMax
						end
					end
				end
				
				if thisSubsys.SecondaryBanks and thisSubsys.SecondaryBanks:isValid() then
					for j=1, #thisSubsys.SecondaryBanks do
						if thisSubsys.SecondaryBanks[j] and thisSubsys.SecondaryBanks[j]:isValid() then
							thisSubsys.SecondaryBanks[j].WeaponClass = tb.WeaponClasses[ssdata.SBanks[j].Class]
							thisSubsys.SecondaryBanks[j].AmmoLeft = (self:GetAmmo(ssdata.SBanks[j].AmmoLeft,data.Name)/100) * thisSubsys.SecondaryBanks[j].AmmoMax
						end
					end
				end
			end
			
		end
	end
		
	if ship.PrimaryBanks and ship.PrimaryBanks:isValid() then
		for i=1, #ship.PrimaryBanks do
			ship.PrimaryBanks[i].WeaponClass = tb.WeaponClasses[data.PBanks[i].Class]
			ship.PrimaryBanks[i].AmmoLeft = (self:GetAmmo(data.PBanks[i].AmmoLeft,data.Name)/100) * ship.PrimaryBanks[i].AmmoMax
		end
	end
	
	if ship.SecondaryBanks and ship.SecondaryBanks:isValid() then
		for i=1, #ship.SecondaryBanks do
			ship.SecondaryBanks[i].WeaponClass = tb.WeaponClasses[data.SBanks[i].Class]
			ship.SecondaryBanks[i].AmmoLeft = (self:GetAmmo(data.SBanks[i].AmmoLeft,data.Name)/100) * ship.SecondaryBanks[i].AmmoMax
		end
	end
	
	if ship == hv.Player then
	
		ship.AfterburnerFuelLeft = data.AfterburnerFuelLeft
		ship.WeaponEnergyLeft = data.WeaponEnergyLeft
	
	end
	
	local newPosition = ba.createVector(data.Position.x, data.Position.y, data.Position.z)
	ship.Position = newPosition
	
	local newOrientation = ba.createOrientation(data.Orientation.p, data.Orientation.b, data.Orientation.h)
	ship.Orientation = newOrientation

	local newVelocity = ba.createVector(data.Velocity.x, data.Velocity.y, data.Velocity.z)
	ship.Physics.Velocity = newVelocity
	
end

--Bang
function SaveState:InstantKill(ship)

	mn.runSEXP("(destroy-instantly !" .. ship.Name .. "! )")
	
end

--Bon voyage!
function SaveState:InstantDepart(ship)

	mn.runSEXP("(set-departure-info !" .. ship.Name .. "! !Hyperspace! !<no anchor>! 0 0 false)")
	ship:warpOut()

end

--Applying data to parse objects, or the objects that have yet to actually arrive in game yet.
function SaveState:ApplyParseData(ship,data)

	--Set the ship to arrive by hyperspace without warp-in to save the FREDder from having to do that
	mn.runSEXP("(set-arrival-info !" .. ship.Name .. "! !Hyperspace! !<any friendly>! 0 0 0 false)")
	
	if data.Wing then
		mn.runSEXP("(set-arrival-info !" .. data.Wing .. "! !Hyperspace! !<any friendly>! 0 0 0 false)")
	end

	if ship.ShipClass.Name ~= data.Class then
		ship.ShipClass = tb.ShipClasses[data.Class]
	end
	
	ship.InitialHull = self:GetHP(data.HP,data.Name)
	
	if data.Shields then
		ship.InitialShields = data.Shields
	end
	
	if ship.MainStatus.PrimaryBanks then
		for i, pbank in ipairs(data.PBanks) do
			if ship.MainStatus.PrimaryBanks[i] then
				ship.MainStatus.PrimaryBanks[i].Class = tb.WeaponClasses[pbank.Class]
				ship.MainStatus.PrimaryAmmo[i] = self:GetAmmo(pbank.AmmoLeft,data.Name)
			end
		end
	end
	
	if ship.MainStatus.SecondaryBanks then
		for i, sbank in ipairs(data.SBanks) do
			if ship.MainStatus.SecondaryBanks[i] then
				ship.MainStatus.SecondaryBanks[i].Class = tb.WeaponClasses[sbank.Class]
				ship.MainStatus.SecondaryAmmo[i] = self:GetAmmo(sbank.AmmoLeft,data.Name)
			end
		end
	end
		
	for i,subsys in ipairs(ship.Subsystems) do
	
		subsys.Damage = 100 - data.Subsystems[i].HP --We record the health in the save data, but the subsystem uses damage (silly Volition)
		
		if subsys.PrimaryBanks and data.Subsystems[i].PBanks then
			for i, pbank in ipairs(data.Subsystems[i].PBanks) do
				if subsys.PrimaryBanks[i] then
					subsys.PrimaryBanks[i].Class = tb.WeaponClasses[pbank.Class]
					subsys.PrimaryAmmo[i] = self:GetAmmo(pbank.AmmoLeft,data.Name)
				end
			end
		end
		
		if subsys.SecondaryBanks and data.Subsystems[i].SBanks then
			for i, sbank in ipairs(data.Subsystems[i].SBanks) do
				if subsys.SecondaryBanks[i] then
					subsys.SecondaryBanks[i].Class = tb.WeaponClasses[sbank.Class]
					subsys.SecondaryAmmo[i] = self:GetAmmo(sbank.AmmoLeft,data.Name)
				end
			end
		end
	
	end
	
	local newPosition = ba.createVector(data.Position.x, data.Position.y, data.Position.z)
	ship.Position = newPosition
	
	local newOrientation = ba.createOrientation(data.Orientation.p, data.Orientation.b, data.Orientation.h)
	ship.Orientation = newOrientation
	
end

--Solves world hunger
function SaveState:GetCurrentSaveIndex()

	return self.CurrentIndex or 0

end

 --Returns false if a ship is destroyed or departed in the current save slot or another specified one.
function SaveState:QueryStatus(ship, index)

	if not self.Enabled then return false end

	if (not index) and (not self.CurrentIndex) then
		return true
	end

	local saveData = self.LoadedData[index or self.CurrentIndex]
	
	if saveData[ship] then	
		if saveData[ship].HasBeenDestroyed then
			return false
		elseif saveData[ship].HasDeparted then
			return false
		else
			return true
		end
	end
	
	return false

end

 --Checks to see if a save slot exists or not. We can also look at other mission save states.
function SaveState:Exists(index, mission)

	if not self.Enabled then return false end
	
	local data
	
	if not mission then
		data = self.LoadedData
	else
		local tempmissionfilename = playerData:getName() .. "_" .. mission .. ".sav"
		tempmissionfilename = self:StripFS2(tempmissionfilename)
		data = axemParse:ReadJSON(tempmissionfilename, "data/config")
	end
	
	if not index then
		if #data > 0 then
			return true
		end
	else
		if data[index] then
			return true
		end
	end
	
	return false

end

 --Anti-frustration measure so someone might not be stuck at 2% hull on checkpoint load
function SaveState:AssistAdd(minhull, minammo, ...)

	self.AssistHP = minhull or 0
	self.AssistAmmo = minammo or 0
	
	for i,v in ipairs(arg) do
	
		self.AssistList[v[1]] = true
	
	end

end

 --These special functions might intervene if the ship is on the AssistList by increasing starting HP/Ammo
function SaveState:GetHP(hp,ship)

	if self.AssistHP and self.AssistList[ship] and hp then
		if hp < self.AssistHP then
			return self.AssistHP
		end
	end
	
	return hp or 100

end

function SaveState:GetAmmo(ammo,ship)

	if self.AssistAmmo and self.AssistList[ship] and ammo then
		if ammo < self.AssistAmmo then
			return self.AssistAmmo
		end
	end
	
	return ammo or 0

end

 --Clears save data
function SaveState:Clear(index)

	if not index then
		self.LoadedData = {}
		cf.deleteFile(self.SaveFilename, "data/config")
	else
		self.LoadedData[index] = nil
		axemParse:WriteJSON(self.LoadedData, self.SaveFilename, "data/config")
	end

end

 --I TOLD them no .fs2 extension, but there's a chance they won't listen!
function SaveState:StripFS2(s)

	local pos = s:find(".fs2", -4, true)

	if pos then
		name = s:sub(1,pos-1)
	end
		
	return s

end

--Lua SEXP definitions
mn.LuaSEXPs["lua-savestate-save"].Action = function(index) SaveState:SaveAll(index) end
mn.LuaSEXPs["lua-savestate-load"].Action = function(index) SaveState:LoadAll(index) end
mn.LuaSEXPs["lua-savestate-shipstatus"].Action = function(name, index) return SaveState:QueryStatus(name, index) end
mn.LuaSEXPs["lua-savestate-getindex"].Action = function() return SaveState:GetCurrentSaveIndex() end
mn.LuaSEXPs["lua-savestate-check"].Action = function(index, mission) return SaveState:Exists(index, mission) end
mn.LuaSEXPs["lua-savestate-assist"].Action = function(minhull, minammo, ...) return SaveState:AssistAdd(minhull, minammo, ...) end
mn.LuaSEXPs["lua-savestate-clear"].Action = function(index) SaveState:Clear(index) end

]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start:
[
	SaveState:Init()
]

$On Ship Arrive:
[
	SaveState:AddShip(hv.Ship)
]

$On Frame:
[
	--PrintDebug(SaveState.List)
	--PrintDebug(SaveState.LoadedData)
]

#End